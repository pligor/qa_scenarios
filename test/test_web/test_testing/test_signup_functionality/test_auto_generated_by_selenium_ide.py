# Generated by Selenium IDE
from time import sleep
import pytest
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from fixtures.chrome_fixtures import mybrowser


class TestTestsignup(object):
    '''Unfortunately does not work because it does not wait for elements to appear'''

    def test_testsignup(self, mybrowser):
        self.driver = mybrowser.driver
        self.driver.implicitly_wait(10)  # seconds
        # Test name: test_signup
        # Step # | name | target | value
        # 1 | open | / |
        self.driver.get("https://node-fs-app.herokuapp.com/")
        # 2 | setWindowSize | 1481x1028 |
        self.driver.set_window_size(1481, 1028)
        # 3 | click | id=signup |
        self.driver.find_element(By.ID, "signup").click()
        # 4 | click | name=action |
        self.driver.find_element(By.NAME, "action").click()
        # 5 | assertText | css=.row:nth-child(1) > .input-field > .invalid-feedback | This field is required
        sleep(5)
        assert self.driver.find_element(By.CSS_SELECTOR,
                                        ".row:nth-child(1) > .input-field > .invalid-feedback").text == "This field is required"
        # 6 | assertText | css=.row:nth-child(2) .invalid-feedback | This field is required
        assert self.driver.find_element(By.CSS_SELECTOR,
                                        ".row:nth-child(2) .invalid-feedback").text == "This field is required"
        # 7 | click | id=fullName |
        self.driver.find_element(By.ID, "fullName").click()
        # 8 | type | id=fullName | whatevername
        self.driver.find_element(By.ID, "fullName").send_keys("whatevername")
        # 9 | click | css=.row:nth-child(2) label |
        self.driver.find_element(By.CSS_SELECTOR, ".row:nth-child(2) label").click()
        # 10 | click | css=.row:nth-child(4) label |
        self.driver.find_element(By.CSS_SELECTOR, ".row:nth-child(4) label").click()
        # 11 | type | id=company | some company
        self.driver.find_element(By.ID, "company").send_keys("some company")
        # 12 | click | css=.row:nth-child(5) label |
        self.driver.find_element(By.CSS_SELECTOR, ".row:nth-child(5) label").click()
        # 13 | type | id=address | some arbitrary address
        self.driver.find_element(By.ID, "address").send_keys("some arbitrary address")
        # 14 | click | css=body |
        self.driver.find_element(By.CSS_SELECTOR, "body").click()
        # 15 | click | css=.row:nth-child(3) label |
        self.driver.find_element(By.CSS_SELECTOR, ".row:nth-child(3) label").click()
        # 16 | type | id=password | Qpqp1010
        self.driver.find_element(By.ID, "password").send_keys("Qpqp1010")
        # 17 | click | css=.row:nth-child(3) |
        self.driver.find_element(By.CSS_SELECTOR, ".row:nth-child(3)").click()
        # 18 | type | id=email | random@email.com
        self.driver.find_element(By.ID, "email").send_keys("random@email.com")
        # 19 | click | css=.row:nth-child(2) label |
        self.driver.find_element(By.CSS_SELECTOR, ".row:nth-child(2) label").click()
        # 20 | click | name=action |
        self.driver.find_element(By.NAME, "action").click()
        # 21 | assertText | css=.card-title | Verify your account
        assert self.driver.find_element(By.CSS_SELECTOR, ".card-title").text == "Verify your account"
        # 22 | assertText | css=p | Successfull registration, login to start using PPMTool
        assert self.driver.find_element(By.CSS_SELECTOR,
                                        "p").text == "Successfull registration, login to start using PPMTool"
